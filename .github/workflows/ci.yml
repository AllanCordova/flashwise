name: Continuous Integration

on:
  push:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .env
        run: cp .env.example .env

      - name: Composer install
        run: ./run composer install

      - name: Generate Codeception files
        run: ./run codecept build

      - name: Up containers
        run: ./run up -d

      - name: Wait for containers to be ready
        run: sleep 15

      - name: PHPUnit Units test
        run: ./run test tests/Unit

  acceptance_tests:
    name: Acceptance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .env
        run: cp .env.example .env

      - name: Composer install
        run: ./run composer install

      - name: Clean Codeception cache
        run: rm -rf tests/Support/_generated/*

      - name: Generate Codeception files
        run: ./run codecept build

      - name: Down containers (clean start)
        run: ./run down -v || true

      - name: Remove all Docker volumes
        run: docker volume prune -f || true

      - name: Start database and PHP containers first
        run: docker compose up -d db php php_test

      - name: Wait for PHP containers to be ready
        run: sleep 5

      - name: Start web and selenium containers
        run: docker compose up -d web selenium

      - name: Wait for web server to be ready
        run: |
          echo "Waiting for web server to be ready..."
          timeout 60 bash -c 'until curl -f http://localhost:8080 2>/dev/null; do echo "Waiting..."; sleep 3; done' || echo "Web server not ready on localhost:8080"
          echo "Web server is ready!"

      - name: Wait for database to be ready
        run: sleep 5

      - name: Check container status
        run: ./run ps

      - name: Verify web server is accessible
        run: |
          echo "Testing web server connectivity..."
          docker compose exec -T web curl -f http://localhost:8080 || echo "Web server not responding on port 8080"
          docker compose exec -T web curl -f http://localhost:80 || echo "Web server not responding on port 80"
          docker compose exec -T php_test curl -f http://web:8080 || echo "php_test cannot reach web:8080"

      - name: Show nginx logs
        run: docker compose logs web

      - name: Run Codeception Acceptance Tests
        run: ./run test:browser

  code_quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .env
        run: cp .env.example .env

      - name: Composer install
        run: ./run composer install

      - name: Run PHPStan
        run: ./run composer phpstan

      - name: Run PHP CS Fixer (dry-run)
        run: ./run composer cs-fix-dry-run